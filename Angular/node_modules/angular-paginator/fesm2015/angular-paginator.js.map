{"version":3,"file":"angular-paginator.js","sources":["../../../src/lib/services/angular-paginator.service.ts","../../../src/lib/angular-paginator.component.ts","../../../src/lib/pipes/angular-paginator.pipe.ts","../../../src/lib/directives/angular-paginator.directive.ts","../../../src/lib/angular-paginator.module.ts","../../../src/public-api.ts","../../../src/angular-paginator.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\n\n@Injectable()\nexport class AngularPaginatorService {\n  /** id is used to identify pagination instances */\n  id = 'ANGULAR_PAGINATOR_DEFAULT';\n\n  /** instances is the collection of pagination componetns */\n  instances: any = {};\n\n  /** emits an event with instance id whenever the page number changes */\n  change: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor() { }\n\n  /**\n   * creates an instance for every pipe differentiated with id\n   *\n   * @param instance each instance refers to a unique pagination component\n   */\n  registerInstance(instance: AngularPaginatorInstance): void {\n\n    if (!this.instances[instance.id]) {\n      this.instances[instance.id] = instance;\n      this.change.emit(instance.id);\n    } else {\n      const changed = this.updateInstance(instance);\n      if (changed) {\n        this.change.emit(instance.id);\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * updates existing pagination instances available\n   * and returns true if value has changed\n   *\n   * @param instance an unique pagination component\n   */\n  updateInstance(instance: AngularPaginatorInstance): boolean {\n\n    for (const key in instance) {\n      if (instance[key] !== this.instances[instance.id][key]) {\n        this.instances[instance.id][key] = instance[key];\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * return instance with given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getInstance(id: string): any {\n    return this.instances[id];\n  }\n\n  /**\n   * return currentPage for given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getCurrentPage(id: string): number {\n    return this.instances[id].currentPage;\n  }\n}\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\nimport { AngularPaginatorService } from './services/angular-paginator.service';\n\n/**\n * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component\n */\n@Component({\n  selector: 'angular-paginator',\n  templateUrl: './angular-paginator.component.html',\n  styleUrls: ['./angular-paginator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class AngularPaginatorComponent implements OnInit {\n\n  /**\n   * Whether to display First / Last buttons\n   */\n  @Input() boundaryLinks = false;\n  /**\n   * Whether to display Previous / Next buttons\n   */\n  @Input() directionLinks = true;\n  /**\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n   */\n  @Input() maxSize = 5;\n  /**\n   * Whether to keep current page in the middle of the visible ones\n   */\n  @Input() rotate = true;\n  /**\n   * Whether to always display the first and last page numbers.\n   * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n   * in-between as necessary. NOTE: max-size refers to the center of the range.\n   * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n   * what would be an ellipsis but is replaced by a number because it is sequential\n   */\n  @Input() boundaryLinkNumbers = false;\n  /**\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n   */\n  @Input() forceEllipses = false;\n  /**\n   * Use unique id when multiple paginations are being used on the same page.\n   * By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n   */\n  @Input() id: string;\n  /**\n   * Text for first button\n   */\n  @Input() firstText = 'First';\n  /**\n   * Text for previous button\n   */\n  @Input() previousText = 'Previous';\n  /**\n   * Text for next button\n   */\n  @Input() nextText = 'Next';\n  /**\n   * Text for last button\n   */\n  @Input() lastText = 'Last';\n  /**\n   * Screen reader text for first button\n   */\n  @Input() screenReaderFirstText = 'First';\n  /**\n   * Screen reader text for previous button\n   */\n  @Input() screenReaderPreviousText = 'Previous';\n  /**\n   * Screen reader text for next button\n   */\n  @Input() screenReaderNextText = 'Next';\n  /**\n   * Screen reader text for lasr button\n   */\n  @Input() screenReaderLastText = 'Last';\n  /**\n   * Screen reader text for page numbers\n   */\n  @Input() screenReaderPageText = 'Page';\n  /**\n   * Screen reader text for current page\n   */\n  @Input() screenReaderCurrentPageText = 'You`re on page';\n  /**\n   * Screen reader text for the pagination component\n   */\n  @Input() screenReaderPaginationLabel = 'Pagination';\n  /**\n   * Adds custom class to the pagination element\n   */\n  @Input() className: string;\n  /**\n   * Hides the pagination component if the items are less than `itemsPerPage`\n   */\n  @Input() autoHide = false;\n  /**\n   * disables pagination component\n   */\n  @Input() disabled = false;\n\n  /**\n   * Emits an event whenever the current page is changed, It emits the current page number\n   *\n   * This event is originally picked up from `AngularPaginatorDirective`\n   */\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   *\n   * @param angularPaginatorService service for angular paginator\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) { }\n\n  ngOnInit(): void {\n\n    // set default id if not provided\n    this.id = this.id ? this.id : this.angularPaginatorService.id;\n\n    // set default class if not provided\n    this.className = this.className ? this.className : this.angularPaginatorService.id;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\n\n/**\n * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n */\n@Pipe({\n  name: 'angularPaginator'\n})\n\nexport class AngularPaginatorPipe implements PipeTransform {\n  /**\n   *\n   * @param angularPaginatorService service for angular pagiantor\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) { }\n\n  /**\n   * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  transform(array: any, args?: any): any {\n\n    const instance: AngularPaginatorInstance = this.createInstance(array, args);\n\n    // create pagination information\n    this.angularPaginatorService.registerInstance(instance);\n\n    // set the slicing range\n    const start = (instance.currentPage - 1) * instance.itemsPerPage;\n    const end = instance.currentPage * instance.itemsPerPage;\n\n    return array.slice(start, end);\n\n  }\n\n  /**\n   * create an instance for each pipe\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  createInstance(array: any, args: any): any {\n    return {\n      id: args.id ? args.id : this.angularPaginatorService.id,\n      currentPage: args.currentPage ? args.currentPage : 1,\n      itemsPerPage: args.itemsPerPage ? args.itemsPerPage : 10,\n      totalItems: array.length\n    };\n  }\n}\n","import { Directive, OnInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance, Page } from '../others/angular-paginator.interface';\nimport { Subscription } from 'rxjs';\n\n/**\n * This is the directive where the actual pagination takes place, it provides a sync between the\n * pipes and the pagination component\n */\n@Directive({\n  selector: 'angularPaginator, [angularPaginator]',\n  exportAs: 'angularPaginator'\n})\n\nexport class AngularPaginatorDirective implements OnInit, OnDestroy {\n\n  /**\n   * Whether to display First / Last buttons\n   */\n  @Input() boundaryLinks: boolean;\n  /**\n   * Whether to display Previous / Next buttons\n   */\n  @Input() directionLinks: boolean;\n  /**\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n   */\n  @Input() maxSize: number;\n  /**\n   * Whether to keep current page in the middle of the visible ones\n   */\n  @Input() rotate: boolean;\n  /**\n   * Whether to always display the first and last page numbers.\n   * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n   * in-between as necessary. NOTE: max-size refers to the center of the range.\n   * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n   * what would be an ellipsis but is replaced by a number because it is sequential\n   */\n  @Input() boundaryLinkNumbers: boolean;\n  /**\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n   */\n  @Input() forceEllipses: boolean;\n  /**\n   * Use unique id when multiple paginations are being used on the same page.\n   * By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n   */\n  @Input() id: string;\n\n  currentPage: number;\n  firstPage = 1;\n  lastPage: number;\n  pages: Page[] = [];\n\n  private subscription: Subscription;\n\n  /**\n   * Emits an event whenever the current page is changed, It emits the current page number\n   */\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>(true);\n\n  /**\n   *\n   * @param angularPaginatorService serivce for angular paginator\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) {\n\n    // subscribe to changes\n    this.subscription = this.angularPaginatorService.change.subscribe((id: string) => {\n      if (id === this.id) {\n        this.updatePages();\n      }\n    });\n\n  }\n\n  /**\n   * Navigate to prevoius page\n   */\n  toPreviousPage(): void {\n    if (this.currentPage > this.firstPage) {\n      this.setCurrentPage(this.currentPage - 1);\n    }\n    return;\n  }\n\n  /**\n   * Navigate to next page\n   */\n  toNextPage(): void {\n    if (this.currentPage < this.lastPage) {\n      this.setCurrentPage(this.currentPage + 1);\n    }\n    return;\n  }\n\n  /**\n   * Navigate to first page\n   */\n  toFirstPage(): void {\n    this.setCurrentPage(this.firstPage);\n    return;\n  }\n\n  /**\n   * Navigate to last page\n   */\n  toLastPage(): void {\n    this.setCurrentPage(this.lastPage);\n    return;\n  }\n\n  /**\n   * Sets current page\n   *\n   * @param page page number to set as currentPage\n   */\n  setCurrentPage(page: number): void {\n    if (page && this.currentPage !== page) {\n      this.currentPage = page;\n      this.pageChange.emit(page);\n    }\n    return;\n  }\n\n  /**\n   * create page object used for template\n   *\n   * @param number page number\n   * @param text page number, text to be displayed\n   * @param isActive whether the page is active or not, true for currentPage\n   */\n  makePage(pageNumber: number, text: any, isActive: boolean): any {\n    return {\n      number: pageNumber,\n      text,\n      active: isActive\n    };\n  }\n\n  /**\n   *  create page array\n   *\n   * @param currentPage current page number\n   * @param itemsPerPage total items per page\n   * @param totalItems no of items for pagination, usually array length\n   */\n  getPages(currentPage: number, itemsPerPage: number, totalItems: number): any {\n    const pages: any = [];\n\n    // Default page limits\n    const totalPages: number = this.lastPage = Math.ceil(totalItems / itemsPerPage);\n\n    let startPage = 1;\n    let endPage: number = totalPages;\n    const isMaxSized: boolean = this.maxSize && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized) {\n\n      if (this.rotate) {\n\n        // current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // add page number links\n    for (let pageNumber = startPage; pageNumber <= endPage; pageNumber++) {\n      const page = this.makePage(pageNumber, pageNumber, pageNumber === currentPage);\n      pages.push(page);\n    }\n\n    // add links to move between page sets\n    if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {\n      if (startPage > 1) {\n\n        // need ellipsis for all options unless range is too close to beginning\n        if (!this.boundaryLinkNumbers || startPage > 3) {\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n\n          if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential\n            const secondPageLink = this.makePage(2, '2', false);\n            pages.unshift(secondPageLink);\n          }\n\n          // add the first page\n          const firstPageLink = this.makePage(1, '1', false);\n          pages.unshift(firstPageLink);\n        }\n      }\n\n      if (endPage < totalPages) {\n\n        // need ellipsis for all options unless range is too close to end\n        if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n\n          if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential\n            const secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);\n            pages.push(secondToLastPageLink);\n          }\n\n          // add the last page\n          const lastPageLink = this.makePage(totalPages, totalPages, false);\n          pages.push(lastPageLink);\n        }\n      }\n    }\n    return pages;\n  }\n\n  /**\n   * Updates the pagination component\n   */\n  updatePages(): void {\n    const instance: AngularPaginatorInstance = this.angularPaginatorService.getInstance(this.id);\n\n    const correctedCurrentPage = this.outOfBoundCorrection(instance);\n\n    if (correctedCurrentPage !== instance.currentPage || this.currentPage !== instance.currentPage) {\n      this.setCurrentPage(correctedCurrentPage);\n    }\n\n    this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);\n\n    return;\n  }\n\n  /**\n   * Check if currentPage is out of bound with totalPages\n   *\n   * @param instance instance for which the range is to be corrected\n   */\n  outOfBoundCorrection(instance: AngularPaginatorInstance): number {\n\n    const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\n\n    if (totalPages < instance.currentPage && 0 < totalPages) {\n      return totalPages;\n    } else if (instance.currentPage < 1) {\n      return 1;\n    }\n\n    return instance.currentPage;\n  }\n\n  /**\n   * check if there is any instance registered with the id\n   */\n  isValidId(): void {\n\n    if (!this.angularPaginatorService.getInstance(this.id)) {\n      throw new Error('There is no instance registered with id `' + this.id + '`');\n    }\n\n    return;\n  }\n\n  ngOnInit(): void {\n    this.isValidId();\n    this.updatePages();\n  }\n\n  ngOnDestroy(): void {\n    /** destroy the subscription when the directive is destroyed */\n    this.subscription.unsubscribe();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AngularPaginatorComponent } from './angular-paginator.component';\nimport { AngularPaginatorPipe } from './pipes/angular-paginator.pipe';\nimport { AngularPaginatorDirective } from './directives/angular-paginator.directive';\nimport { AngularPaginatorService } from './services/angular-paginator.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [AngularPaginatorService],\n  declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],\n  exports: [AngularPaginatorComponent, AngularPaginatorPipe]\n})\n\nexport class AngularPaginatorModule { }\n","/*\n * Public API Surface of angular-paginator\n */\n\nexport * from './lib/angular-paginator.module';\nexport * from './lib/angular-paginator.component';\nexport * from './lib/pipes/angular-paginator.pipe';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AngularPaginatorDirective as ɵb} from './lib/directives/angular-paginator.directive';\nexport {AngularPaginatorService as ɵa} from './lib/services/angular-paginator.service';"]}