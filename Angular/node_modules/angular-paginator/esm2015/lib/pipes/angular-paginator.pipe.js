import { Pipe } from '@angular/core';
import { AngularPaginatorService } from '../services/angular-paginator.service';
/**
 * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/angular-paginator.service';
export class AngularPaginatorPipe {
    /**
     *
     * @param angularPaginatorService service for angular pagiantor
     */
    constructor(angularPaginatorService) {
        this.angularPaginatorService = angularPaginatorService;
    }
    /**
     * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
     *
     * @param array input array for which the manipulation happens
     * @param args input arguments for the paginator pipe
     */
    transform(array, args) {
        const instance = this.createInstance(array, args);
        // create pagination information
        this.angularPaginatorService.registerInstance(instance);
        // set the slicing range
        const start = (instance.currentPage - 1) * instance.itemsPerPage;
        const end = instance.currentPage * instance.itemsPerPage;
        return array.slice(start, end);
    }
    /**
     * create an instance for each pipe
     *
     * @param array input array for which the manipulation happens
     * @param args input arguments for the paginator pipe
     */
    createInstance(array, args) {
        return {
            id: args.id ? args.id : this.angularPaginatorService.id,
            currentPage: args.currentPage ? args.currentPage : 1,
            itemsPerPage: args.itemsPerPage ? args.itemsPerPage : 10,
            totalItems: array.length
        };
    }
}
AngularPaginatorPipe.ɵfac = function AngularPaginatorPipe_Factory(t) { return new (t || AngularPaginatorPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AngularPaginatorService)); };
AngularPaginatorPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "angularPaginator", type: AngularPaginatorPipe, pure: true });
AngularPaginatorPipe.ctorParameters = () => [
    { type: AngularPaginatorService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularPaginatorPipe, [{
        type: Pipe,
        args: [{
                name: 'angularPaginator'
            }]
    }], function () { return [{ type: ɵngcc1.AngularPaginatorService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wYWdpbmF0b3IucGlwZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9waXBlcy9hbmd1bGFyLXBhZ2luYXRvci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBR2hGO0FBQ0E7QUFDQSxHQUFHOzs7QUFLSCxNQUFNLE9BQU8sb0JBQW9CO0FBQUcsSUFDbEM7QUFDRjtBQUNFO0FBQ0UsT0FBQztBQUNMLElBQUUsWUFBb0IsdUJBQWdEO0FBQUksUUFBcEQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtBQUFDLElBQUcsQ0FBQztBQUMzRSxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFFSixPQURHO0FBQ0wsSUFBRSxTQUFTLENBQUMsS0FBVSxFQUFFLElBQVU7QUFBSSxRQUVsQyxNQUFNLFFBQVEsR0FBNkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDaEYsUUFDSSxnQ0FBZ0M7QUFDcEMsUUFBSSxJQUFJLENBQUMsdUJBQXVCLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUQsUUFDSSx3QkFBd0I7QUFDNUIsUUFBSSxNQUFNLEtBQUssR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQztBQUNyRSxRQUFJLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQztBQUM3RCxRQUNJLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbkMsSUFDRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FERztBQUNMLElBQUUsY0FBYyxDQUFDLEtBQVUsRUFBRSxJQUFTO0FBQUksUUFDdEMsT0FBTztBQUNYLFlBQU0sRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFO0FBQzdELFlBQU0sV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUQsWUFBTSxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUM5RCxZQUFNLFVBQVUsRUFBRSxLQUFLLENBQUMsTUFBTTtBQUM5QixTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDtnREE5Q0MsSUFBSSxTQUFDLGtCQUNKLElBQUksRUFBRSxrQkFBa0IsY0FDekI7dUhBRUc7QUFBQztBQUE4QyxZQVYxQyx1QkFBdUI7QUFBRzs7Ozs7O3dGQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmd1bGFyUGFnaW5hdG9yU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2FuZ3VsYXItcGFnaW5hdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgQW5ndWxhclBhZ2luYXRvckluc3RhbmNlIH0gZnJvbSAnLi4vb3RoZXJzL2FuZ3VsYXItcGFnaW5hdG9yLmludGVyZmFjZSc7XG5cbi8qKlxuICogUGFnaW5hdGlvbiBQaXBlIHdoaWNoIHBhZ2luYXRlcyB0aGUgYXJyYXkgZm9yIHRoZSBwcm92aWRlZCBhcmd1bWVudHMgc3VjaCBhcyBgaXRlbXNQZXJQYWdlYCBhbmQgYGN1cnJlbnRQYWdlYFxuICovXG5AUGlwZSh7XG4gIG5hbWU6ICdhbmd1bGFyUGFnaW5hdG9yJ1xufSlcblxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJQYWdpbmF0b3JQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gYW5ndWxhclBhZ2luYXRvclNlcnZpY2Ugc2VydmljZSBmb3IgYW5ndWxhciBwYWdpYW50b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYW5ndWxhclBhZ2luYXRvclNlcnZpY2U6IEFuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlKSB7IH1cblxuICAvKipcbiAgICogdGhpcyBwaXBlcyBwYWdpbmF0ZXMgdGhlIGFycmF5IGZvciB0aGUgcHJvdmlkZWQgYXJndW1lbnRzIHN1Y2ggYXMgYGl0ZW1zUGVyUGFnZWAgYW5kIGBjdXJyZW50UGFnZWBcbiAgICpcbiAgICogQHBhcmFtIGFycmF5IGlucHV0IGFycmF5IGZvciB3aGljaCB0aGUgbWFuaXB1bGF0aW9uIGhhcHBlbnNcbiAgICogQHBhcmFtIGFyZ3MgaW5wdXQgYXJndW1lbnRzIGZvciB0aGUgcGFnaW5hdG9yIHBpcGVcbiAgICovXG4gIHRyYW5zZm9ybShhcnJheTogYW55LCBhcmdzPzogYW55KTogYW55IHtcblxuICAgIGNvbnN0IGluc3RhbmNlOiBBbmd1bGFyUGFnaW5hdG9ySW5zdGFuY2UgPSB0aGlzLmNyZWF0ZUluc3RhbmNlKGFycmF5LCBhcmdzKTtcblxuICAgIC8vIGNyZWF0ZSBwYWdpbmF0aW9uIGluZm9ybWF0aW9uXG4gICAgdGhpcy5hbmd1bGFyUGFnaW5hdG9yU2VydmljZS5yZWdpc3Rlckluc3RhbmNlKGluc3RhbmNlKTtcblxuICAgIC8vIHNldCB0aGUgc2xpY2luZyByYW5nZVxuICAgIGNvbnN0IHN0YXJ0ID0gKGluc3RhbmNlLmN1cnJlbnRQYWdlIC0gMSkgKiBpbnN0YW5jZS5pdGVtc1BlclBhZ2U7XG4gICAgY29uc3QgZW5kID0gaW5zdGFuY2UuY3VycmVudFBhZ2UgKiBpbnN0YW5jZS5pdGVtc1BlclBhZ2U7XG5cbiAgICByZXR1cm4gYXJyYXkuc2xpY2Uoc3RhcnQsIGVuZCk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBjcmVhdGUgYW4gaW5zdGFuY2UgZm9yIGVhY2ggcGlwZVxuICAgKlxuICAgKiBAcGFyYW0gYXJyYXkgaW5wdXQgYXJyYXkgZm9yIHdoaWNoIHRoZSBtYW5pcHVsYXRpb24gaGFwcGVuc1xuICAgKiBAcGFyYW0gYXJncyBpbnB1dCBhcmd1bWVudHMgZm9yIHRoZSBwYWdpbmF0b3IgcGlwZVxuICAgKi9cbiAgY3JlYXRlSW5zdGFuY2UoYXJyYXk6IGFueSwgYXJnczogYW55KTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGFyZ3MuaWQgPyBhcmdzLmlkIDogdGhpcy5hbmd1bGFyUGFnaW5hdG9yU2VydmljZS5pZCxcbiAgICAgIGN1cnJlbnRQYWdlOiBhcmdzLmN1cnJlbnRQYWdlID8gYXJncy5jdXJyZW50UGFnZSA6IDEsXG4gICAgICBpdGVtc1BlclBhZ2U6IGFyZ3MuaXRlbXNQZXJQYWdlID8gYXJncy5pdGVtc1BlclBhZ2UgOiAxMCxcbiAgICAgIHRvdGFsSXRlbXM6IGFycmF5Lmxlbmd0aFxuICAgIH07XG4gIH1cbn1cbiJdfQ==