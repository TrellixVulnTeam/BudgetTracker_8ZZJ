{"version":3,"file":"angular-paginator.directive.d.ts","sources":["angular-paginator.directive.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, OnDestroy, EventEmitter } from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance, Page } from '../others/angular-paginator.interface';\n/**\n * This is the directive where the actual pagination takes place, it provides a sync between the\n * pipes and the pagination component\n */\nexport declare class AngularPaginatorDirective implements OnInit, OnDestroy {\n    private angularPaginatorService;\n    /**\n     * Whether to display First / Last buttons\n     */\n    boundaryLinks: boolean;\n    /**\n     * Whether to display Previous / Next buttons\n     */\n    directionLinks: boolean;\n    /**\n     * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n     */\n    maxSize: number;\n    /**\n     * Whether to keep current page in the middle of the visible ones\n     */\n    rotate: boolean;\n    /**\n     * Whether to always display the first and last page numbers.\n     * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n     * in-between as necessary. NOTE: max-size refers to the center of the range.\n     * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n     * what would be an ellipsis but is replaced by a number because it is sequential\n     */\n    boundaryLinkNumbers: boolean;\n    /**\n     * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n     */\n    forceEllipses: boolean;\n    /**\n     * Use unique id when multiple paginations are being used on the same page.\n     * By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n     */\n    id: string;\n    currentPage: number;\n    firstPage: number;\n    lastPage: number;\n    pages: Page[];\n    private subscription;\n    /**\n     * Emits an event whenever the current page is changed, It emits the current page number\n     */\n    pageChange: EventEmitter<number>;\n    /**\n     *\n     * @param angularPaginatorService serivce for angular paginator\n     */\n    constructor(angularPaginatorService: AngularPaginatorService);\n    /**\n     * Navigate to prevoius page\n     */\n    toPreviousPage(): void;\n    /**\n     * Navigate to next page\n     */\n    toNextPage(): void;\n    /**\n     * Navigate to first page\n     */\n    toFirstPage(): void;\n    /**\n     * Navigate to last page\n     */\n    toLastPage(): void;\n    /**\n     * Sets current page\n     *\n     * @param page page number to set as currentPage\n     */\n    setCurrentPage(page: number): void;\n    /**\n     * create page object used for template\n     *\n     * @param number page number\n     * @param text page number, text to be displayed\n     * @param isActive whether the page is active or not, true for currentPage\n     */\n    makePage(pageNumber: number, text: any, isActive: boolean): any;\n    /**\n     *  create page array\n     *\n     * @param currentPage current page number\n     * @param itemsPerPage total items per page\n     * @param totalItems no of items for pagination, usually array length\n     */\n    getPages(currentPage: number, itemsPerPage: number, totalItems: number): any;\n    /**\n     * Updates the pagination component\n     */\n    updatePages(): void;\n    /**\n     * Check if currentPage is out of bound with totalPages\n     *\n     * @param instance instance for which the range is to be corrected\n     */\n    outOfBoundCorrection(instance: AngularPaginatorInstance): number;\n    /**\n     * check if there is any instance registered with the id\n     */\n    isValidId(): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n}\n"]}