(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-paginator', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common,global['angular-paginator'] = {}, global.ng.core, global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, common) { 
var _c0 = function (a0) { return { "disabled": a0 }; };
function AngularPaginatorComponent_ng_container_2_ng_container_2_li_2_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 7);
    ɵngcc0.ɵɵlistener("click", function AngularPaginatorComponent_ng_container_2_ng_container_2_li_2_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); ɵngcc0.ɵɵnextContext(3); var _r0 = ɵngcc0.ɵɵreference(1); return _r0.toFirstPage(); });
    ɵngcc0.ɵɵelementStart(1, "a", 8);
    ɵngcc0.ɵɵelement(2, "span", 9);
    ɵngcc0.ɵɵelementStart(3, "span", 10);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(3);
    var _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c0, _r0.currentPage === _r0.firstPage || ctx_r3.disabled));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r3.firstText, ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.screenReaderFirstText);
} }
function AngularPaginatorComponent_ng_container_2_ng_container_2_li_3_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 7);
    ɵngcc0.ɵɵlistener("click", function AngularPaginatorComponent_ng_container_2_ng_container_2_li_3_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); ɵngcc0.ɵɵnextContext(3); var _r0 = ɵngcc0.ɵɵreference(1); return _r0.toPreviousPage(); });
    ɵngcc0.ɵɵelementStart(1, "a", 8);
    ɵngcc0.ɵɵelement(2, "span", 9);
    ɵngcc0.ɵɵelementStart(3, "span", 10);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext(3);
    var _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c0, _r0.currentPage === _r0.firstPage || ctx_r4.disabled));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r4.previousText, ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.screenReaderPreviousText);
} }
function AngularPaginatorComponent_ng_container_2_ng_container_2_li_4_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var page_r12 = ɵngcc0.ɵɵnextContext().$implicit;
    var ctx_r13 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2("", ctx_r13.screenReaderPageText + " ", "", page_r12["text"], "");
} }
function AngularPaginatorComponent_ng_container_2_ng_container_2_li_4_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var page_r12 = ɵngcc0.ɵɵnextContext().$implicit;
    var ctx_r14 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2("", ctx_r14.screenReaderCurrentPageText + " ", "", page_r12["text"], "");
} }
var _c1 = function (a0, a1) { return { "active": a0, "disabled": a1 }; };
function AngularPaginatorComponent_ng_container_2_ng_container_2_li_4_Template(rf, ctx) { if (rf & 1) {
    var _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 7);
    ɵngcc0.ɵɵlistener("click", function AngularPaginatorComponent_ng_container_2_ng_container_2_li_4_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); var page_r12 = ctx.$implicit; ɵngcc0.ɵɵnextContext(3); var _r0 = ɵngcc0.ɵɵreference(1); return !page_r12["active"] && _r0.setCurrentPage(page_r12["number"]); });
    ɵngcc0.ɵɵelementStart(1, "a", 8);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵtemplate(3, AngularPaginatorComponent_ng_container_2_ng_container_2_li_4_span_3_Template, 2, 2, "span", 11);
    ɵngcc0.ɵɵtemplate(4, AngularPaginatorComponent_ng_container_2_ng_container_2_li_4_span_4_Template, 2, 2, "span", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var page_r12 = ctx.$implicit;
    var ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(4, _c1, page_r12["active"], ctx_r5.disabled));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", page_r12["text"], " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !page_r12["active"]);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", page_r12["active"]);
} }
function AngularPaginatorComponent_ng_container_2_ng_container_2_li_5_Template(rf, ctx) { if (rf & 1) {
    var _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 7);
    ɵngcc0.ɵɵlistener("click", function AngularPaginatorComponent_ng_container_2_ng_container_2_li_5_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r20); ɵngcc0.ɵɵnextContext(3); var _r0 = ɵngcc0.ɵɵreference(1); return _r0.toNextPage(); });
    ɵngcc0.ɵɵelementStart(1, "a", 8);
    ɵngcc0.ɵɵelement(2, "span", 9);
    ɵngcc0.ɵɵelementStart(3, "span", 10);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵngcc0.ɵɵnextContext(3);
    var _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c0, _r0.currentPage === _r0.lastPage || ctx_r6.disabled));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r6.nextText, ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r6.screenReaderNextText);
} }
function AngularPaginatorComponent_ng_container_2_ng_container_2_li_6_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 7);
    ɵngcc0.ɵɵlistener("click", function AngularPaginatorComponent_ng_container_2_ng_container_2_li_6_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); ɵngcc0.ɵɵnextContext(3); var _r0 = ɵngcc0.ɵɵreference(1); return _r0.toLastPage(); });
    ɵngcc0.ɵɵelementStart(1, "a", 8);
    ɵngcc0.ɵɵelement(2, "span", 9);
    ɵngcc0.ɵɵelementStart(3, "span", 10);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    var _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c0, _r0.currentPage === _r0.lastPage || ctx_r7.disabled));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r7.lastText, ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r7.screenReaderLastText);
} }
function AngularPaginatorComponent_ng_container_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "ul", 4);
    ɵngcc0.ɵɵtemplate(2, AngularPaginatorComponent_ng_container_2_ng_container_2_li_2_Template, 5, 5, "li", 5);
    ɵngcc0.ɵɵtemplate(3, AngularPaginatorComponent_ng_container_2_ng_container_2_li_3_Template, 5, 5, "li", 5);
    ɵngcc0.ɵɵtemplate(4, AngularPaginatorComponent_ng_container_2_ng_container_2_li_4_Template, 5, 7, "li", 6);
    ɵngcc0.ɵɵtemplate(5, AngularPaginatorComponent_ng_container_2_ng_container_2_li_5_Template, 5, 5, "li", 5);
    ɵngcc0.ɵɵtemplate(6, AngularPaginatorComponent_ng_container_2_ng_container_2_li_6_Template, 5, 5, "li", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    var _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r2.className);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.boundaryLinks);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.directionLinks);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", _r0.pages);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.directionLinks);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.boundaryLinks);
} }
function AngularPaginatorComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "nav", 3);
    ɵngcc0.ɵɵtemplate(2, AngularPaginatorComponent_ng_container_2_ng_container_2_Template, 7, 6, "ng-container", 2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    var _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r1.screenReaderPaginationLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", _r0.pages["length"] !== 0);
} }
'use strict';

    var AngularPaginatorService = /** @class */ (function () {
        function AngularPaginatorService() {
            /** id is used to identify pagination instances */
            this.id = 'ANGULAR_PAGINATOR_DEFAULT';
            /** instances is the collection of pagination componetns */
            this.instances = {};
            /** emits an event with instance id whenever the page number changes */
            this.change = new core.EventEmitter();
        }
        /**
         * creates an instance for every pipe differentiated with id
         *
         * @param instance each instance refers to a unique pagination component
         */
        AngularPaginatorService.prototype.registerInstance = function (instance) {
            if (!this.instances[instance.id]) {
                this.instances[instance.id] = instance;
                this.change.emit(instance.id);
            }
            else {
                var changed = this.updateInstance(instance);
                if (changed) {
                    this.change.emit(instance.id);
                }
            }
            return;
        };
        /**
         * updates existing pagination instances available
         * and returns true if value has changed
         *
         * @param instance an unique pagination component
         */
        AngularPaginatorService.prototype.updateInstance = function (instance) {
            for (var key in instance) {
                if (instance[key] !== this.instances[instance.id][key]) {
                    this.instances[instance.id][key] = instance[key];
                    return true;
                }
            }
            return false;
        };
        /**
         * return instance with given id
         *
         * @param id unique id of the pagination component
         */
        AngularPaginatorService.prototype.getInstance = function (id) {
            return this.instances[id];
        };
        /**
         * return currentPage for given id
         *
         * @param id unique id of the pagination component
         */
        AngularPaginatorService.prototype.getCurrentPage = function (id) {
            return this.instances[id].currentPage;
        };
AngularPaginatorService.ɵfac = function AngularPaginatorService_Factory(t) { return new (t || AngularPaginatorService)(); };
AngularPaginatorService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AngularPaginatorService, factory: function (t) { return AngularPaginatorService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularPaginatorService, [{
        type: core.Injectable
    }], function () { return []; }, null); })();
        return AngularPaginatorService;
    }());
    AngularPaginatorService.ctorParameters = function () { return []; };

    /**
     * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component
     */
    var AngularPaginatorComponent = /** @class */ (function () {
        /**
         *
         * @param angularPaginatorService service for angular paginator
         */
        function AngularPaginatorComponent(angularPaginatorService) {
            this.angularPaginatorService = angularPaginatorService;
            /**
             * Whether to display First / Last buttons
             */
            this.boundaryLinks = false;
            /**
             * Whether to display Previous / Next buttons
             */
            this.directionLinks = true;
            /**
             * Limit number for pagination size, i.e., the maximum page numbers to be displayed
             */
            this.maxSize = 5;
            /**
             * Whether to keep current page in the middle of the visible ones
             */
            this.rotate = true;
            /**
             * Whether to always display the first and last page numbers.
             * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
             * in-between as necessary. NOTE: max-size refers to the center of the range.
             * This option may add up to 2 more numbers on each side of the displayed range for the end value and
             * what would be an ellipsis but is replaced by a number because it is sequential
             */
            this.boundaryLinkNumbers = false;
            /**
             * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
             */
            this.forceEllipses = false;
            /**
             * Text for first button
             */
            this.firstText = 'First';
            /**
             * Text for previous button
             */
            this.previousText = 'Previous';
            /**
             * Text for next button
             */
            this.nextText = 'Next';
            /**
             * Text for last button
             */
            this.lastText = 'Last';
            /**
             * Screen reader text for first button
             */
            this.screenReaderFirstText = 'First';
            /**
             * Screen reader text for previous button
             */
            this.screenReaderPreviousText = 'Previous';
            /**
             * Screen reader text for next button
             */
            this.screenReaderNextText = 'Next';
            /**
             * Screen reader text for lasr button
             */
            this.screenReaderLastText = 'Last';
            /**
             * Screen reader text for page numbers
             */
            this.screenReaderPageText = 'Page';
            /**
             * Screen reader text for current page
             */
            this.screenReaderCurrentPageText = 'You`re on page';
            /**
             * Screen reader text for the pagination component
             */
            this.screenReaderPaginationLabel = 'Pagination';
            /**
             * Hides the pagination component if the items are less than `itemsPerPage`
             */
            this.autoHide = false;
            /**
             * disables pagination component
             */
            this.disabled = false;
            /**
             * Emits an event whenever the current page is changed, It emits the current page number
             *
             * This event is originally picked up from `AngularPaginatorDirective`
             */
            this.pageChange = new core.EventEmitter();
        }
        AngularPaginatorComponent.prototype.ngOnInit = function () {
            // set default id if not provided
            this.id = this.id ? this.id : this.angularPaginatorService.id;
            // set default class if not provided
            this.className = this.className ? this.className : this.angularPaginatorService.id;
        };
AngularPaginatorComponent.ɵfac = function AngularPaginatorComponent_Factory(t) { return new (t || AngularPaginatorComponent)(ɵngcc0.ɵɵdirectiveInject(AngularPaginatorService)); };
AngularPaginatorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AngularPaginatorComponent, selectors: [["angular-paginator"]], inputs: { boundaryLinks: "boundaryLinks", directionLinks: "directionLinks", maxSize: "maxSize", rotate: "rotate", boundaryLinkNumbers: "boundaryLinkNumbers", forceEllipses: "forceEllipses", firstText: "firstText", previousText: "previousText", nextText: "nextText", lastText: "lastText", screenReaderFirstText: "screenReaderFirstText", screenReaderPreviousText: "screenReaderPreviousText", screenReaderNextText: "screenReaderNextText", screenReaderLastText: "screenReaderLastText", screenReaderPageText: "screenReaderPageText", screenReaderCurrentPageText: "screenReaderCurrentPageText", screenReaderPaginationLabel: "screenReaderPaginationLabel", autoHide: "autoHide", disabled: "disabled", id: "id", className: "className" }, outputs: { pageChange: "pageChange" }, decls: 3, vars: 8, consts: [[3, "id", "boundaryLinks", "directionLinks", "maxSize", "rotate", "boundaryLinkNumbers", "forceEllipses", "pageChange"], ["paginator", "angularPaginator"], [4, "ngIf"], [1, "angular-bs4-pagination"], [1, "pagination", 3, "ngClass"], ["class", "page-item", 3, "ngClass", "click", 4, "ngIf"], ["class", "page-item", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "page-item", 3, "ngClass", "click"], ["href", "javascript:void(0)", 1, "page-link"], ["aria-hidden", "true", 3, "innerHTML"], [1, "sr-only"], ["class", "sr-only", 4, "ngIf"]], template: function AngularPaginatorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "angularPaginator", 0, 1);
        ɵngcc0.ɵɵlistener("pageChange", function AngularPaginatorComponent_Template_angularPaginator_pageChange_0_listener($event) { return ctx.pageChange.emit($event); });
        ɵngcc0.ɵɵtemplate(2, AngularPaginatorComponent_ng_container_2_Template, 3, 2, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵproperty("id", ctx.id)("boundaryLinks", ctx.boundaryLinks)("directionLinks", ctx.directionLinks)("maxSize", ctx.maxSize)("rotate", ctx.rotate)("boundaryLinkNumbers", ctx.boundaryLinkNumbers)("forceEllipses", ctx.forceEllipses);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !(ctx.autoHide && _r0.pages["length"] <= 1));
    } }, directives: function () { return [AngularPaginatorDirective, ɵngcc1.NgIf, ɵngcc1.NgClass, ɵngcc1.NgForOf]; }, styles: [".angular-bs4-pagination[_ngcontent-%COMP%]   .disabled[_ngcontent-%COMP%]{pointer-events:none}"], changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularPaginatorComponent, [{
        type: core.Component,
        args: [{
                selector: 'angular-paginator',
                template: "<angularPaginator [id]=\"id\" [boundaryLinks]=\"boundaryLinks\" [directionLinks]=\"directionLinks\" [maxSize]=\"maxSize\"\n  [rotate]=\"rotate\" [boundaryLinkNumbers]=\"boundaryLinkNumbers\" [forceEllipses]=\"forceEllipses\" #paginator=\"angularPaginator\"\n  (pageChange)=\"pageChange.emit($event)\">\n\n  <!-- ======================================== BOOTSTRAP 4 TEMPLATE ======================================== -->\n  <ng-container *ngIf=\"!(autoHide && paginator.pages['length'] <= 1)\">\n    <nav class=\"angular-bs4-pagination\" [attr.aria-label]=\"screenReaderPaginationLabel\">\n\n      <ng-container *ngIf=\"paginator.pages['length'] !== 0\">\n        <ul class=\"pagination\" [ngClass]=\"className\">\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toFirstPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"firstText\"></span>\n              <span class=\"sr-only\">{{ screenReaderFirstText }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toPreviousPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"previousText\"></span>\n              <span class=\"sr-only\">{{ screenReaderPreviousText }}</span>\n            </a>\n          </li>\n\n          <!-- pagination array -->\n          <li class=\"page-item\" *ngFor=\"let page of paginator.pages\" [ngClass]=\"{'active': page['active'], 'disabled': disabled}\"\n            (click)=\"!page['active'] && paginator.setCurrentPage(page['number'])\">\n            <a href=\"javascript:void(0)\" class=\"page-link\">\n              {{ page['text'] }}\n              <span class=\"sr-only\" *ngIf=\"!page['active']\">{{ screenReaderPageText + ' ' }}{{ page['text'] }}</span>\n              <span class=\"sr-only\" *ngIf=\"page['active']\">{{ screenReaderCurrentPageText + ' ' }}{{ page['text'] }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toNextPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"nextText\"></span>\n              <span class=\"sr-only\">{{ screenReaderNextText }}</span>\n            </a>\n          </li>\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toLastPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"lastText\"></span>\n              <span class=\"sr-only\">{{ screenReaderLastText }}</span>\n            </a>\n          </li>\n\n        </ul>\n      </ng-container>\n\n    </nav>\n  </ng-container>\n\n</angularPaginator>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                styles: [".angular-bs4-pagination .disabled{pointer-events:none}"]
            }]
    }], function () { return [{ type: AngularPaginatorService }]; }, { boundaryLinks: [{
            type: core.Input
        }], directionLinks: [{
            type: core.Input
        }], maxSize: [{
            type: core.Input
        }], rotate: [{
            type: core.Input
        }], boundaryLinkNumbers: [{
            type: core.Input
        }], forceEllipses: [{
            type: core.Input
        }], firstText: [{
            type: core.Input
        }], previousText: [{
            type: core.Input
        }], nextText: [{
            type: core.Input
        }], lastText: [{
            type: core.Input
        }], screenReaderFirstText: [{
            type: core.Input
        }], screenReaderPreviousText: [{
            type: core.Input
        }], screenReaderNextText: [{
            type: core.Input
        }], screenReaderLastText: [{
            type: core.Input
        }], screenReaderPageText: [{
            type: core.Input
        }], screenReaderCurrentPageText: [{
            type: core.Input
        }], screenReaderPaginationLabel: [{
            type: core.Input
        }], autoHide: [{
            type: core.Input
        }], disabled: [{
            type: core.Input
        }], pageChange: [{
            type: core.Output
        }], id: [{
            type: core.Input
        }], className: [{
            type: core.Input
        }] }); })();
        return AngularPaginatorComponent;
    }());
    AngularPaginatorComponent.ctorParameters = function () { return [
        { type: AngularPaginatorService }
    ]; };
    AngularPaginatorComponent.propDecorators = {
        boundaryLinks: [{ type: core.Input }],
        directionLinks: [{ type: core.Input }],
        maxSize: [{ type: core.Input }],
        rotate: [{ type: core.Input }],
        boundaryLinkNumbers: [{ type: core.Input }],
        forceEllipses: [{ type: core.Input }],
        id: [{ type: core.Input }],
        firstText: [{ type: core.Input }],
        previousText: [{ type: core.Input }],
        nextText: [{ type: core.Input }],
        lastText: [{ type: core.Input }],
        screenReaderFirstText: [{ type: core.Input }],
        screenReaderPreviousText: [{ type: core.Input }],
        screenReaderNextText: [{ type: core.Input }],
        screenReaderLastText: [{ type: core.Input }],
        screenReaderPageText: [{ type: core.Input }],
        screenReaderCurrentPageText: [{ type: core.Input }],
        screenReaderPaginationLabel: [{ type: core.Input }],
        className: [{ type: core.Input }],
        autoHide: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        pageChange: [{ type: core.Output }]
    };

    /**
     * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
     */
    var AngularPaginatorPipe = /** @class */ (function () {
        /**
         *
         * @param angularPaginatorService service for angular pagiantor
         */
        function AngularPaginatorPipe(angularPaginatorService) {
            this.angularPaginatorService = angularPaginatorService;
        }
        /**
         * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
         *
         * @param array input array for which the manipulation happens
         * @param args input arguments for the paginator pipe
         */
        AngularPaginatorPipe.prototype.transform = function (array, args) {
            var instance = this.createInstance(array, args);
            // create pagination information
            this.angularPaginatorService.registerInstance(instance);
            // set the slicing range
            var start = (instance.currentPage - 1) * instance.itemsPerPage;
            var end = instance.currentPage * instance.itemsPerPage;
            return array.slice(start, end);
        };
        /**
         * create an instance for each pipe
         *
         * @param array input array for which the manipulation happens
         * @param args input arguments for the paginator pipe
         */
        AngularPaginatorPipe.prototype.createInstance = function (array, args) {
            return {
                id: args.id ? args.id : this.angularPaginatorService.id,
                currentPage: args.currentPage ? args.currentPage : 1,
                itemsPerPage: args.itemsPerPage ? args.itemsPerPage : 10,
                totalItems: array.length
            };
        };
AngularPaginatorPipe.ɵfac = function AngularPaginatorPipe_Factory(t) { return new (t || AngularPaginatorPipe)(ɵngcc0.ɵɵdirectiveInject(AngularPaginatorService)); };
AngularPaginatorPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "angularPaginator", type: AngularPaginatorPipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularPaginatorPipe, [{
        type: core.Pipe,
        args: [{
                name: 'angularPaginator'
            }]
    }], function () { return [{ type: AngularPaginatorService }]; }, null); })();
        return AngularPaginatorPipe;
    }());
    AngularPaginatorPipe.ctorParameters = function () { return [
        { type: AngularPaginatorService }
    ]; };

    /**
     * This is the directive where the actual pagination takes place, it provides a sync between the
     * pipes and the pagination component
     */
    var AngularPaginatorDirective = /** @class */ (function () {
        /**
         *
         * @param angularPaginatorService serivce for angular paginator
         */
        function AngularPaginatorDirective(angularPaginatorService) {
            var _this = this;
            this.angularPaginatorService = angularPaginatorService;
            this.firstPage = 1;
            this.pages = [];
            /**
             * Emits an event whenever the current page is changed, It emits the current page number
             */
            this.pageChange = new core.EventEmitter(true);
            // subscribe to changes
            this.subscription = this.angularPaginatorService.change.subscribe(function (id) {
                if (id === _this.id) {
                    _this.updatePages();
                }
            });
        }
        /**
         * Navigate to prevoius page
         */
        AngularPaginatorDirective.prototype.toPreviousPage = function () {
            if (this.currentPage > this.firstPage) {
                this.setCurrentPage(this.currentPage - 1);
            }
            return;
        };
        /**
         * Navigate to next page
         */
        AngularPaginatorDirective.prototype.toNextPage = function () {
            if (this.currentPage < this.lastPage) {
                this.setCurrentPage(this.currentPage + 1);
            }
            return;
        };
        /**
         * Navigate to first page
         */
        AngularPaginatorDirective.prototype.toFirstPage = function () {
            this.setCurrentPage(this.firstPage);
            return;
        };
        /**
         * Navigate to last page
         */
        AngularPaginatorDirective.prototype.toLastPage = function () {
            this.setCurrentPage(this.lastPage);
            return;
        };
        /**
         * Sets current page
         *
         * @param page page number to set as currentPage
         */
        AngularPaginatorDirective.prototype.setCurrentPage = function (page) {
            if (page && this.currentPage !== page) {
                this.currentPage = page;
                this.pageChange.emit(page);
            }
            return;
        };
        /**
         * create page object used for template
         *
         * @param number page number
         * @param text page number, text to be displayed
         * @param isActive whether the page is active or not, true for currentPage
         */
        AngularPaginatorDirective.prototype.makePage = function (pageNumber, text, isActive) {
            return {
                number: pageNumber,
                text: text,
                active: isActive
            };
        };
        /**
         *  create page array
         *
         * @param currentPage current page number
         * @param itemsPerPage total items per page
         * @param totalItems no of items for pagination, usually array length
         */
        AngularPaginatorDirective.prototype.getPages = function (currentPage, itemsPerPage, totalItems) {
            var pages = [];
            // Default page limits
            var totalPages = this.lastPage = Math.ceil(totalItems / itemsPerPage);
            var startPage = 1;
            var endPage = totalPages;
            var isMaxSized = this.maxSize && this.maxSize < totalPages;
            // recompute if maxSize
            if (isMaxSized) {
                if (this.rotate) {
                    // current page is displayed in the middle of the visible ones
                    startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                    endPage = startPage + this.maxSize - 1;
                    // Adjust if limit is exceeded
                    if (endPage > totalPages) {
                        endPage = totalPages;
                        startPage = endPage - this.maxSize + 1;
                    }
                }
                else {
                    // Visible pages are paginated with maxSize
                    startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                    // adjust last page if limit is exceeded
                    endPage = Math.min(startPage + this.maxSize - 1, totalPages);
                }
            }
            // add page number links
            for (var pageNumber = startPage; pageNumber <= endPage; pageNumber++) {
                var page = this.makePage(pageNumber, pageNumber, pageNumber === currentPage);
                pages.push(page);
            }
            // add links to move between page sets
            if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {
                if (startPage > 1) {
                    // need ellipsis for all options unless range is too close to beginning
                    if (!this.boundaryLinkNumbers || startPage > 3) {
                        var previousPageSet = this.makePage(startPage - 1, '...', false);
                        pages.unshift(previousPageSet);
                    }
                    if (this.boundaryLinkNumbers) {
                        if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential
                            var secondPageLink = this.makePage(2, '2', false);
                            pages.unshift(secondPageLink);
                        }
                        // add the first page
                        var firstPageLink = this.makePage(1, '1', false);
                        pages.unshift(firstPageLink);
                    }
                }
                if (endPage < totalPages) {
                    // need ellipsis for all options unless range is too close to end
                    if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {
                        var nextPageSet = this.makePage(endPage + 1, '...', false);
                        pages.push(nextPageSet);
                    }
                    if (this.boundaryLinkNumbers) {
                        if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential
                            var secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);
                            pages.push(secondToLastPageLink);
                        }
                        // add the last page
                        var lastPageLink = this.makePage(totalPages, totalPages, false);
                        pages.push(lastPageLink);
                    }
                }
            }
            return pages;
        };
        /**
         * Updates the pagination component
         */
        AngularPaginatorDirective.prototype.updatePages = function () {
            var instance = this.angularPaginatorService.getInstance(this.id);
            var correctedCurrentPage = this.outOfBoundCorrection(instance);
            if (correctedCurrentPage !== instance.currentPage || this.currentPage !== instance.currentPage) {
                this.setCurrentPage(correctedCurrentPage);
            }
            this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);
            return;
        };
        /**
         * Check if currentPage is out of bound with totalPages
         *
         * @param instance instance for which the range is to be corrected
         */
        AngularPaginatorDirective.prototype.outOfBoundCorrection = function (instance) {
            var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
            if (totalPages < instance.currentPage && 0 < totalPages) {
                return totalPages;
            }
            else if (instance.currentPage < 1) {
                return 1;
            }
            return instance.currentPage;
        };
        /**
         * check if there is any instance registered with the id
         */
        AngularPaginatorDirective.prototype.isValidId = function () {
            if (!this.angularPaginatorService.getInstance(this.id)) {
                throw new Error('There is no instance registered with id `' + this.id + '`');
            }
            return;
        };
        AngularPaginatorDirective.prototype.ngOnInit = function () {
            this.isValidId();
            this.updatePages();
        };
        AngularPaginatorDirective.prototype.ngOnDestroy = function () {
            /** destroy the subscription when the directive is destroyed */
            this.subscription.unsubscribe();
        };
AngularPaginatorDirective.ɵfac = function AngularPaginatorDirective_Factory(t) { return new (t || AngularPaginatorDirective)(ɵngcc0.ɵɵdirectiveInject(AngularPaginatorService)); };
AngularPaginatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AngularPaginatorDirective, selectors: [["angularPaginator"], ["", "angularPaginator", ""]], inputs: { boundaryLinks: "boundaryLinks", directionLinks: "directionLinks", maxSize: "maxSize", rotate: "rotate", boundaryLinkNumbers: "boundaryLinkNumbers", forceEllipses: "forceEllipses", id: "id" }, outputs: { pageChange: "pageChange" }, exportAs: ["angularPaginator"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularPaginatorDirective, [{
        type: core.Directive,
        args: [{
                selector: 'angularPaginator, [angularPaginator]',
                exportAs: 'angularPaginator'
            }]
    }], function () { return [{ type: AngularPaginatorService }]; }, { pageChange: [{
            type: core.Output
        }], boundaryLinks: [{
            type: core.Input
        }], directionLinks: [{
            type: core.Input
        }], maxSize: [{
            type: core.Input
        }], rotate: [{
            type: core.Input
        }], boundaryLinkNumbers: [{
            type: core.Input
        }], forceEllipses: [{
            type: core.Input
        }], id: [{
            type: core.Input
        }] }); })();
        return AngularPaginatorDirective;
    }());
    AngularPaginatorDirective.ctorParameters = function () { return [
        { type: AngularPaginatorService }
    ]; };
    AngularPaginatorDirective.propDecorators = {
        boundaryLinks: [{ type: core.Input }],
        directionLinks: [{ type: core.Input }],
        maxSize: [{ type: core.Input }],
        rotate: [{ type: core.Input }],
        boundaryLinkNumbers: [{ type: core.Input }],
        forceEllipses: [{ type: core.Input }],
        id: [{ type: core.Input }],
        pageChange: [{ type: core.Output }]
    };

    var AngularPaginatorModule = /** @class */ (function () {
        function AngularPaginatorModule() {
        }
AngularPaginatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularPaginatorModule });
AngularPaginatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularPaginatorModule_Factory(t) { return new (t || AngularPaginatorModule)(); }, providers: [AngularPaginatorService], imports: [[
            common.CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularPaginatorModule, { declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective], imports: [ɵngcc1.CommonModule], exports: [AngularPaginatorComponent, AngularPaginatorPipe] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularPaginatorModule, [{
        type: core.NgModule,
        args: [{
                imports: [
                    common.CommonModule
                ],
                providers: [AngularPaginatorService],
                declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],
                exports: [AngularPaginatorComponent, AngularPaginatorPipe]
            }]
    }], function () { return []; }, null); })();
        return AngularPaginatorModule;
    }());

    /*
     * Public API Surface of angular-paginator
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AngularPaginatorComponent = AngularPaginatorComponent;
    exports.AngularPaginatorModule = AngularPaginatorModule;
    exports.AngularPaginatorPipe = AngularPaginatorPipe;
    exports.ɵa = AngularPaginatorService;
    exports.ɵb = AngularPaginatorDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=angular-paginator.umd.js.map